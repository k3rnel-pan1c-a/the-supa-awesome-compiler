{
    "type": "PROGRAM",
    "statements": [
        {
            "FUNCTION_STATEMENT": {
                "type": "FUNCTION_STATEMENT",
                "name": "fact",
                "parameters": [
                    {
                        "type": "FUNCTION_PARAMETER",
                        "parameter_name": "n",
                        "parameter_type": "int"
                    }
                ],
                "body": {
                    "type": "BLOCK_STATEMENT",
                    "statements": [
                        {
                            "type": "IF_STATEMENT",
                            "condition": {
                                "type": "INFIX_EXPRESSION",
                                "left_node": {
                                    "type": "IDENTIFIER_LITERAL",
                                    "identifier": "n"
                                },
                                "operator": "==",
                                "right_node": {
                                    "type": "INTEGER_LITERAL",
                                    "literal": 1
                                }
                            },
                            "consequence": {
                                "type": "BLOCK_STATEMENT",
                                "statements": [
                                    {
                                        "type": "RETURN_STATEMENT",
                                        "expression": {
                                            "type": "INTEGER_LITERAL",
                                            "literal": 1
                                        }
                                    }
                                ]
                            },
                            "alternative": {
                                "type": "BLOCK_STATEMENT",
                                "statements": []
                            }
                        },
                        {
                            "type": "RETURN_STATEMENT",
                            "expression": {
                                "type": "INFIX_EXPRESSION",
                                "left_node": {
                                    "type": "IDENTIFIER_LITERAL",
                                    "identifier": "n"
                                },
                                "operator": "*",
                                "right_node": {
                                    "type": "FUNCTION_CALL",
                                    "function": {
                                        "type": "IDENTIFIER_LITERAL",
                                        "identifier": "fact"
                                    },
                                    "arguments": [
                                        {
                                            "type": "INFIX_EXPRESSION",
                                            "left_node": {
                                                "type": "IDENTIFIER_LITERAL",
                                                "identifier": "n"
                                            },
                                            "operator": "-",
                                            "right_node": {
                                                "type": "INTEGER_LITERAL",
                                                "literal": 1
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                },
                "return_type": "int"
            }
        },
        {
            "FUNCTION_STATEMENT": {
                "type": "FUNCTION_STATEMENT",
                "name": "main",
                "parameters": [],
                "body": {
                    "type": "BLOCK_STATEMENT",
                    "statements": [
                        {
                            "type": "RETURN_STATEMENT",
                            "expression": {
                                "type": "FUNCTION_CALL",
                                "function": {
                                    "type": "IDENTIFIER_LITERAL",
                                    "identifier": "fact"
                                },
                                "arguments": [
                                    {
                                        "type": "INTEGER_LITERAL",
                                        "literal": 7
                                    }
                                ]
                            }
                        }
                    ]
                },
                "return_type": "int"
            }
        }
    ]
}